1
00:00:01,400 --> 00:00:03,530
In the next section of our lab

2
00:00:03,530 --> 00:00:06,839
exercise, you are going to be creating a Spark application with

3
00:00:06,839 --> 00:00:12,530
Spark Streaming. This section focuses on
Spark Streams -- an easy to build and

4
00:00:12,530 --> 00:00:13,480
scalable

5
00:00:13,480 --> 00:00:19,570
stream processing libraries. Stream jobs are written in the same way as Spark batch jobs

6
00:00:19,570 --> 00:00:22,650
and they support Java, Scala and Python.

7
00:00:22,650 --> 00:00:26,640
In this exercise, the taxi data trip

8
00:00:26,640 --> 00:00:29,740
will be streamed using a socket
connection

9
00:00:29,740 --> 00:00:34,270
and then analyzed to provide a summary
of the number passengers by taxi vendors

10
00:00:34,270 --> 00:00:37,920
We're going to be using a 

11
00:00:37,920 --> 00:00:43,120
Spark shell with Scala. What I'm doing
here is creating a PythonStreams directory

12
00:00:43,120 --> 00:00:46,430
under our /home/virtuser

13
00:00:46,430 --> 00:00:50,079
and then I'm going to copy in from

14
00:00:50,079 --> 00:00:53,250
from our labfiles directory into our PythonStreams

15
00:00:53,250 --> 00:00:56,440
directory. I'm just moving some files around

16
00:00:56,440 --> 00:01:01,129
so that we can have everything in one
location. The first file that I moved was the

17
00:01:01,129 --> 00:01:03,000
nyctaxi100.csv

18
00:01:03,000 --> 00:01:07,860
and then we have to the taxistreams.py file

19
00:01:07,860 --> 00:01:12,610
The Python file will be the one that
actually pushes the CSV file

20
00:01:12,610 --> 00:01:16,670
into a socket connection on port 7777.

21
00:01:16,670 --> 00:01:20,939
so this will serve as our streaming
data set so we're doing a simulation

22
00:01:20,939 --> 00:01:24,630
of the stream. Make sure you edit

23
00:01:24,630 --> 00:01:28,320
the Python file -- the taxistream.py

24
00:01:28,320 --> 00:01:32,250
to point to the correct location of your
taxi file.

25
00:01:32,250 --> 00:01:36,090
Here I just need to change the location
to

26
00:01:36,090 --> 00:01:40,270
the virtuser. This is where initially just
copy the

27
00:01:40,270 --> 00:01:43,770
nyctaxi100 file. You can see that the port

28
00:01:43,770 --> 00:01:50,000
and the host name and they were just going to print each row of the data that we

29
00:01:50,000 --> 00:01:55,630
stream out so you see it on the console.

30
00:01:55,630 --> 00:01:58,030
okay changing to that PythonStreams directory --

31
00:01:58,030 --> 00:02:02,320
and then you're going to

32
00:02:02,320 --> 00:02:05,330
run this taxistreams.py

33
00:02:05,330 --> 00:02:09,099
while it runs here

34
00:02:09,099 --> 00:02:13,160
it is going to wait for the spark streaming
application

35
00:02:13,160 --> 00:02:17,230
so again when the Spark one starts up,
This python stream will feed 

36
00:02:17,230 --> 00:02:24,150
in the CSV file. So open up another terminal because this new terminal is 

37
00:02:24,150 --> 00:02:25,630
where we're going to write

38
00:02:25,630 --> 00:02:32,630
the Spark application. Start up the Spark
shell

39
00:02:44,860 --> 00:02:48,120
Because this program is going to
require you to view the content

40
00:02:48,120 --> 00:02:51,599
on the console, we're going to turn off the logs so

41
00:02:51,599 --> 00:02:56,110
these four lines of code will turn the logging off so that no logs will appear in the console

42
00:02:56,110 --> 00:02:59,290
that'll make it a lot easier to see the
streaming content

43
00:02:59,290 --> 00:03:02,900
that comes out so when the screen goes
through, the Spark application will grab

44
00:03:02,900 --> 00:03:06,220
information -- basically define the number
passengers

45
00:03:06,220 --> 00:03:10,180
per taxi vendor and it will print that to this console right here.

46
00:03:10,180 --> 00:03:13,319
and now I just imported some libraries

47
00:03:13,319 --> 00:03:18,510
for spark streaming and just like with

48
00:03:18,510 --> 00:03:23,340
SparkSQL you're going to have to
create a streaming context

49
00:03:23,340 --> 00:03:29,170
from the given spark context.

50
00:03:29,170 --> 00:03:33,030
we're going to call this ssc.StreamContext

51
00:03:33,030 --> 00:03:38,269
and the passing in the Spark context.
Again we're giving in an interval of one

52
00:03:38,269 --> 00:03:38,910
second

53
00:03:38,910 --> 00:03:43,340
for the batches to come in. This just
makes it easier for us to read

54
00:03:43,340 --> 00:03:50,340
the stream as it comes through the
socket.

55
00:03:51,920 --> 00:03:54,830
Now we have to create the socket stream
that connects

56
00:03:54,830 --> 00:03:59,750
to the localhost on port 7777

57
00:03:59,750 --> 00:04:06,750
so using the stream context

58
00:04:08,730 --> 00:04:12,090
Here again -- this is the taxi stream that we will feed into that

59
00:04:12,090 --> 00:04:18,700
socket that we are going to listen to.
The CSV file is going to be fed in

60
00:04:18,700 --> 00:04:23,230
with the data -- that is just to simulate our stream,

61
00:04:23,230 --> 00:04:27,490
again. Now we put in the business logic

62
00:04:27,490 --> 00:04:30,750
to split up the lines on each comma

63
00:04:30,750 --> 00:04:34,100
and then provide this information

64
00:04:34,100 --> 00:04:38,200
to the spark streaming application so
that it can process and analyze the

65
00:04:38,200 --> 00:04:45,200
stream

66
00:04:46,660 --> 00:04:52,370
so we define the lines by mapping it
and splitting it on the comma.

67
00:04:52,370 --> 00:04:57,570
and then pass(15) is the taxi vendor. pass(7)

68
00:04:57,570 --> 00:05:04,300
is the passenger count for that vendor and then we're reducing it by the taxi vendor

69
00:05:04,300 --> 00:05:07,770
to get the total count or the number of passengers per taxi.

70
00:05:07,770 --> 00:05:12,060
Now this will tell us which taxi vendor had the most passengers.

71
00:05:12,060 --> 00:05:18,600
We're going to have it print to the console.

72
00:05:18,600 --> 00:05:21,830
But wait a second? Why didn't it print anything?

73
00:05:21,830 --> 00:05:25,660
That's because in a stream supplication
a won't print anything until you

74
00:05:25,660 --> 00:05:26,770
explicitly

75
00:05:26,770 --> 00:05:31,300
tell it to print by using the start command to have it to start the stream.

76
00:05:31,300 --> 00:05:34,830
Once that happens you see that
the

77
00:05:34,830 --> 00:05:37,880
PythonStreams windows and this one is going to both run.

78
00:05:37,880 --> 00:05:41,550
So copy and paste both of the lines in the lab exercise guide.

79
00:05:41,550 --> 00:05:45,880
Make sure you do that, for both of them.

80
00:05:45,880 --> 00:05:49,650
It will automatically start to listen to the
socket and then the Python streams will

81
00:05:49,650 --> 00:05:51,770
begin by feeding in that CSV file.

82
00:05:51,770 --> 00:05:58,770
Go ahead and copy/paste both lines at once

83
00:05:59,259 --> 00:06:01,729
Then immediately you can see the Python stream

84
00:06:01,729 --> 00:06:05,319
beginning to feed in the data and then it prints it out and then our

85
00:06:05,319 --> 00:06:09,240
Scala terminal here, you see the
taxi vendor

86
00:06:09,240 --> 00:06:15,629
and the number passengers for that vendor. This is simulating a stream

87
00:06:15,629 --> 00:06:19,830
and showing you how spark streaming can be used to process a stream

88
00:06:19,830 --> 00:06:23,209
and our processing here just creates

89
00:06:23,209 --> 00:06:26,949
the analysis for the number of passengers.

90
00:06:26,949 --> 00:06:30,110
You can quit the streams by doing

91
00:06:30,110 --> 00:06:34,029
CTRL+C on each window to stop it.

92
00:06:34,029 --> 00:06:37,669
This demonstrates that you have now
successfully created a spark streaming

93
00:06:37,669 --> 00:06:38,179
application.

